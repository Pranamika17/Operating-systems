diff --git a/Makefile b/Makefile
index 863f585..6926d34 100644
--- a/Makefile
+++ b/Makefile
@@ -2,7 +2,7 @@
 VERSION = 4
 PATCHLEVEL = 18
 SUBLEVEL = 0
-EXTRAVERSION =
+EXTRAVERSION = .casio
 NAME = Merciless Moray
 
 # *DOCUMENTATION*
diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
index 887d3a7..6c951ee 100644
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -2937,6 +2937,12 @@ config X86_DMA_REMAP
 config HAVE_GENERIC_GUP
 	def_bool y
 
+menu "CASIO scheduler"
+
+config SCHED_CASIO_POLICY
+        bool "CASIO scheduling policy"
+        default y
+endmenu
 source "net/Kconfig"
 
 source "drivers/Kconfig"
diff --git a/fs/proc/Makefile b/fs/proc/Makefile
index ead487e..44f4223 100644
--- a/fs/proc/Makefile
+++ b/fs/proc/Makefile
@@ -27,6 +27,7 @@ proc-y	+= softirqs.o
 proc-y	+= namespaces.o
 proc-y	+= self.o
 proc-y	+= thread_self.o
+proc-y  += proc_misc.o
 proc-$(CONFIG_PROC_SYSCTL)	+= proc_sysctl.o
 proc-$(CONFIG_NET)		+= proc_net.o
 proc-$(CONFIG_PROC_KCORE)	+= kcore.o
diff --git a/fs/proc/internal.h b/fs/proc/internal.h
index da3dbfa..4b1739d 100644
--- a/fs/proc/internal.h
+++ b/fs/proc/internal.h
@@ -17,7 +17,7 @@
 #include <linux/binfmts.h>
 #include <linux/sched/coredump.h>
 #include <linux/sched/task.h>
-
+#include <linux/sched.h>
 struct ctl_table_header;
 struct mempolicy;
 
diff --git a/fs/proc/proc_misc.c b/fs/proc/proc_misc.c
index e69de29..5f0aff1 100644
--- a/fs/proc/proc_misc.c
+++ b/fs/proc/proc_misc.c
@@ -0,0 +1,136 @@
+/*
+ *  linux/fs/proc/proc_misc.c
+ *
+ *  linux/fs/proc/array.c
+ *  Copyright (C) 1992  by Linus Torvalds
+ *  based on ideas by Darren Senn
+ *
+ *  This used to be the part of array.c. See the rest of history and credits
+ *  there. I took this into a separate file and switched the thing to generic
+ *  proc_file_inode_operations, leaving in array.c only per-process stuff.
+ *  Inumbers allocation made dynamic (via create_proc_entry()).  AV, May 1999.
+ *
+ * Changes:
+ * Fulton Green      :  Encapsulated position metric calculations.
+ *                      <kernel@FultonGreen.com>
+ */
+
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <linux/time.h>
+#include <linux/kernel.h>
+#include <linux/kernel_stat.h>
+#include <linux/fs.h>
+#include <linux/tty.h>
+#include <linux/string.h>
+#include <linux/mman.h>
+#include <linux/proc_fs.h>
+#include <linux/ioport.h>
+#include <linux/mm.h>
+#include <linux/mmzone.h>
+#include <linux/pagemap.h>
+#include <linux/swap.h>
+#include <linux/slab.h>
+#include <linux/smp.h>
+#include <linux/signal.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/seq_file.h>
+#include <linux/times.h>
+#include <linux/profile.h>
+#include <linux/utsname.h>
+#include <linux/blkdev.h>
+#include <linux/hugetlb.h>
+#include <linux/jiffies.h>
+#include <linux/sysrq.h>
+#include <linux/vmalloc.h>
+#include <linux/crash_dump.h>
+#include <linux/pid_namespace.h>
+#include <asm/uaccess.h>
+#include <asm/pgtable.h>
+#include <asm/io.h>
+#include <asm/tlb.h>
+#include <asm/div64.h>
+#include "internal.h"
+
+#ifdef  CONFIG_SCHED_CASIO_POLICY
+#define CASIO_MAX_CURSOR_LINES_EVENTS   1
+
+static int casio_open(struct inode *inode, struct file *file)
+{
+        return 0;
+}
+
+static ssize_t casio_read(struct file *filp, char __user *buf, size_t count, loff_t *f_pos)
+{
+        char buffer[CASIO_MSG_SIZE];
+        unsigned int len=0,k,i;
+        struct casio_event_log *log=NULL;
+        buffer[0]='\0';
+        log=get_casio_event_log();
+        if(log){
+                if(log->cursor < log->lines){
+                        k=(log->lines > (log->cursor + CASIO_MAX_CURSOR_LINES_EVENTS))?(log->cursor + CASIO_MAX_CURSOR_LINES_EVENTS):(log->lines);
+                        for(i=log->cursor; i<k;i++){
+                                len = snprintf(buffer, count, "%s%d,%llu,%s\n",
+                                        buffer,
+                                        log->casio_event[i].action,
+                                        log->casio_event[i].timestamp,
+                                        log->casio_event[i].msg);
+                        }
+                        log->cursor=k;
+                }
+                if(len) 
+                        copy_to_user(buf,buffer,len);
+
+        }
+        return len;
+}
+
+static int casio_release(struct inode *inode, struct file *file)
+{
+        return 0;
+}
+
+static const struct file_operations proc_casio_operations = {
+        .open           = casio_open,
+        .read           = casio_read,
+        .release        = casio_release,
+};
+
+int __init proc_casio_init(void)
+{
+        /*struct proc_dir_entry *casio_entry;
+
+        casio_entry = create_proc_entry("casio_event", 0666, &proc_root);
+
+        if (casio_entry){
+                casio_entry->proc_fops = &proc_casio_operations;
+                casio_entry->data=NULL;
+		return 0;
+        }
+
+	return -1;*/
+
+	proc_create("casio_event", 0, NULL, &proc_casio_operations);
+        return 0;
+}
+module_init(proc_casio_init);
+#endif
+
+/*
+ *  linux/fs/proc/proc_misc.c
+ *
+ *  linux/fs/proc/array.c
+ *  Copyright (C) 1992  by Linus Torvalds
+ *  based on ideas by Darren Senn
+ *
+ *  This used to be the part of array.c. See the rest of history and credits
+ *  there. I took this into a separate file and switched the thing to generic
+ *  proc_file_inode_operations, leaving in array.c only per-process stuff.
+ *  Inumbers allocation made dynamic (via create_proc_entry()).  AV, May 1999.
+ *
+ * Changes:
+ * Fulton Green      :  Encapsulated position metric calculations.
+ *                      <kernel@FultonGreen.com>
+ */
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 43731fe..2ea15f5 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1184,6 +1184,10 @@ struct task_struct {
 	 * New fields for task_struct should be added above here, so that
 	 * they are included in the randomized portion of task_struct.
 	 */
+#ifdef CONFIG_SCHED_CASIO_POLICY
+        unsigned int casio_id;
+        unsigned long long deadline;
+#endif
 	randomized_struct_fields_end
 
 	/* CPU-specific state of this task: */
@@ -1196,7 +1200,36 @@ struct task_struct {
 	 * Do not put anything below here!
 	 */
 };
+#ifdef CONFIG_SCHED_CASIO_POLICY
+#define SCHED_CASIO             6
+#endif
+
+#ifdef  CONFIG_SCHED_CASIO_POLICY
+
+#define CASIO_MSG_SIZE          400
+#define CASIO_MAX_EVENT_LINES   10000
+
+#define CASIO_ENQUEUE           1
+#define CASIO_DEQUEUE           2
+#define CASIO_CONTEXT_SWITCH    3
+#define CASIO_MSG               4
+
+struct casio_event{
+        int action;
+        unsigned long long timestamp;
+        char msg[CASIO_MSG_SIZE];
+};
 
+struct casio_event_log{
+        struct casio_event casio_event[CASIO_MAX_EVENT_LINES];
+        unsigned long lines;
+        unsigned long cursor;
+};
+void init_casio_event_log(void);
+struct casio_event_log * get_casio_event_log(void);
+void register_casio_event(unsigned long long t, char *m, int a);
+
+#endif
 static inline struct pid *task_pid(struct task_struct *task)
 {
 	return task->pids[PIDTYPE_PID].pid;
diff --git a/include/uapi/linux/sched/types.h b/include/uapi/linux/sched/types.h
index 10fbb80..426c254 100644
--- a/include/uapi/linux/sched/types.h
+++ b/include/uapi/linux/sched/types.h
@@ -6,6 +6,10 @@
 
 struct sched_param {
 	int sched_priority;
+#ifdef CONFIG_SCHED_CASIO_POLICY
+       unsigned int    casio_id;
+       unsigned long long deadline;
+#endif
 };
 
 #define SCHED_ATTR_SIZE_VER0	48	/* sizeof first published struct */
diff --git a/kernel/sched/Makefile b/kernel/sched/Makefile
index d9a02b3..024ed08 100644
--- a/kernel/sched/Makefile
+++ b/kernel/sched/Makefile
@@ -29,3 +29,4 @@ obj-$(CONFIG_CPU_FREQ) += cpufreq.o
 obj-$(CONFIG_CPU_FREQ_GOV_SCHEDUTIL) += cpufreq_schedutil.o
 obj-$(CONFIG_MEMBARRIER) += membarrier.o
 obj-$(CONFIG_CPU_ISOLATION) += isolation.o
+obj-$(CONFIG_SCHED_CASIO_POLICY) += sched_casio.o
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index fe365c9..2b9e595 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -37,7 +37,9 @@ const_debug unsigned int sysctl_sched_features =
 	0;
 #undef SCHED_FEAT
 #endif
-
+#ifdef  CONFIG_SCHED_CASIO_POLICY
+        char msg[CASIO_MSG_SIZE];
+#endif
 /*
  * Number of tasks to iterate in a single balance run.
  * Limited because this is done with IRQs disabled.
@@ -3473,6 +3475,23 @@ static void __sched notrace __schedule(bool preempt)
 	}
 
 	next = pick_next_task(rq, prev, &rf);
+#ifdef  CONFIG_SCHED_CASIO_POLICY
+        if(prev->policy==SCHED_CASIO || next->policy==SCHED_CASIO){
+                if(prev->policy==SCHED_CASIO && next->policy==SCHED_CASIO){
+                        snprintf(msg,CASIO_MSG_SIZE,"prev->(%d:%d),next->(%d:%d)",prev->casio_id,prev->pid,next->casio_id,next->pid);
+                }
+                else{
+                        if(prev->policy==SCHED_CASIO){
+                                snprintf(msg,CASIO_MSG_SIZE,"prev->(%d:%d),next->(-1:%d)",prev->casio_id,prev->pid,next->pid);
+                        }else{
+                                snprintf(msg,CASIO_MSG_SIZE,"prev->(-1:%d),next->(%d:%d)",prev->pid,next->casio_id,next->pid);
+                        }
+                }
+                register_casio_event(sched_clock(), msg, CASIO_CONTEXT_SWITCH);
+
+
+        }
+#endif
 	clear_tsk_need_resched(prev);
 	clear_preempt_need_resched();
 
@@ -4115,8 +4134,10 @@ static void __setscheduler(struct rq *rq, struct task_struct *p,
 	p->prio = normal_prio(p);
 	if (keep_boost)
 		p->prio = rt_effective_prio(p, p->prio);
-
-	if (dl_prio(p->prio))
+        if (p-> policy == SCHED_CASIO) {
+                p->sched_class = &casio_sched_class;
+        }
+	else if (dl_prio(p->prio))
 		p->sched_class = &dl_sched_class;
 	else if (rt_prio(p->prio))
 		p->sched_class = &rt_sched_class;
@@ -4352,6 +4373,11 @@ static int __sched_setscheduler(struct task_struct *p,
 		put_prev_task(rq, p);
 
 	prev_class = p->sched_class;
+#ifdef CONFIG_SCHED_CASIO_POLICY
+       if(policy == SCHED_CASIO){
+               add_casio_task_2_list(&rq->casio_rq, p);
+       }
+#endif
 	__setscheduler(rq, p, attr, pi);
 
 	if (queued) {
@@ -4391,7 +4417,12 @@ static int _sched_setscheduler(struct task_struct *p, int policy,
 		.sched_priority = param->sched_priority,
 		.sched_nice	= PRIO_TO_NICE(p->static_prio),
 	};
-
+#ifdef CONFIG_SCHED_CASIO_POLICY
+       if(policy==SCHED_CASIO){
+               p->deadline = param->deadline;
+               p->casio_id = param->casio_id;
+       }
+#endif
 	/* Fixup the legacy SCHED_RESET_ON_FORK hack. */
 	if ((policy != SETPARAM_POLICY) && (policy & SCHED_RESET_ON_FORK)) {
 		attr.sched_flags |= SCHED_FLAG_RESET_ON_FORK;
@@ -4414,6 +4445,8 @@ static int _sched_setscheduler(struct task_struct *p, int policy,
 int sched_setscheduler(struct task_struct *p, int policy,
 		       const struct sched_param *param)
 {
+	//if (policy == SCHED_CASIO)
+               // add_casio_task_2_list(&(this_rq())->casio_rq, p);
 	return _sched_setscheduler(p, policy, param, true);
 }
 EXPORT_SYMBOL_GPL(sched_setscheduler);
@@ -6024,6 +6057,9 @@ void __init sched_init(void)
 		init_cfs_rq(&rq->cfs);
 		init_rt_rq(&rq->rt);
 		init_dl_rq(&rq->dl);
+#ifdef CONFIG_SCHED_CASIO_POLICY
+                init_casio_rq(&rq->casio_rq);
+#endif
 #ifdef CONFIG_FAIR_GROUP_SCHED
 		root_task_group.shares = ROOT_TASK_GROUP_LOAD;
 		INIT_LIST_HEAD(&rq->leaf_cfs_rq_list);
@@ -6111,7 +6147,9 @@ void __init sched_init(void)
 	init_sched_fair_class();
 
 	init_schedstats();
-
+#ifdef CONFIG_SCHED_CASIO_POLICY
+        init_casio_event_log();
+#endif
 	scheduler_running = 1;
 }
 
@@ -6379,7 +6417,7 @@ static void sched_change_group(struct task_struct *tsk, int type)
 
 /*
  * Change task's runqueue when it moves between groups.
- *
+ched*
  * The caller of this function should have put the task in its new group by
  * now. This function just updates tsk->se.cfs_rq and tsk->se.parent to reflect
  * its new group.
diff --git a/kernel/sched/sched.h b/kernel/sched/sched.h
index c7742dc..49ce9cd 100644
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@ -2,7 +2,7 @@
 /*
  * Scheduler internal types and methods:
  */
-#include <linux/sched.h>
+
 
 #include <linux/sched/autogroup.h>
 #include <linux/sched/clock.h>
@@ -163,7 +163,7 @@ static inline int fair_policy(int policy)
 
 static inline int rt_policy(int policy)
 {
-	return policy == SCHED_FIFO || policy == SCHED_RR;
+	return policy == SCHED_FIFO || policy == SCHED_RR|| policy == SCHED_CASIO;
 }
 
 static inline int dl_policy(int policy)
@@ -743,7 +743,19 @@ extern void sched_put_rd(struct root_domain *rd);
 extern void rto_push_irq_work_func(struct irq_work *work);
 #endif
 #endif /* CONFIG_SMP */
-
+#ifdef CONFIG_SCHED_CASIO_POLICY
+struct casio_task {
+        struct rb_node casio_rb_node;
+        unsigned long long absolute_deadline;
+        struct list_head casio_list_node;
+        struct task_struct *task;
+};
+struct casio_rq {
+        struct rb_root casio_rb_root;
+        struct list_head casio_list_head;
+        atomic_t nr_running;
+};
+#endif
 /*
  * This is the main, per-CPU runqueue data structure.
  *
@@ -752,6 +764,9 @@ extern void rto_push_irq_work_func(struct irq_work *work);
  * acquire operations must be ordered by ascending &runqueue.
  */
 struct rq {
+#ifdef CONFIG_SCHED_CASIO_POLICY
+        struct casio_rq casio_rq;
+#endif
 	/* runqueue lock: */
 	raw_spinlock_t		lock;
 
@@ -1547,11 +1562,21 @@ static inline void set_curr_task(struct rq *rq, struct task_struct *curr)
 	curr->sched_class->set_curr_task(rq);
 }
 
-#ifdef CONFIG_SMP
+#ifdef  CONFIG_SCHED_CASIO_POLICY
+# include "sched_casio.h"
+#endif
+#ifdef CONFIG_SCHED_CASIO_POLICY
+        #define sched_class_highest (&casio_sched_class)
+#elif CONFIG_SMP
+        #define sched_class_highest (&stop_sched_class)
+#else
+        #define sched_class_highest (&dl_sched_class)
+#endif
+/*#ifdef CONFIG_SMP
 #define sched_class_highest (&stop_sched_class)
 #else
 #define sched_class_highest (&dl_sched_class)
-#endif
+#endif*/
 #define for_each_class(class) \
    for (class = sched_class_highest; class; class = class->next)
 
@@ -1560,7 +1585,7 @@ extern const struct sched_class dl_sched_class;
 extern const struct sched_class rt_sched_class;
 extern const struct sched_class fair_sched_class;
 extern const struct sched_class idle_sched_class;
-
+//extern const struct sched_class casio_sched_class;
 
 #ifdef CONFIG_SMP
 
diff --git a/kernel/sched/sched_casio.c b/kernel/sched/sched_casio.c
index e69de29..e2bff18 100644
--- a/kernel/sched/sched_casio.c
+++ b/kernel/sched/sched_casio.c
@@ -0,0 +1,418 @@
+/*
+ * casio-task scheduling class.
+ *
+ * 
+ */
+/*
+ * log functions.
+ */
+//#include "sched_casio.h"
+#include "sched.h"
+#include <linux/sched.h>
+#include <linux/sched/clock.h>
+/*
+ * casio-task scheduling class.
+ *
+ * 
+ */
+/*
+ * log functions.
+ */
+//#include "sched_casio.h"
+
+struct casio_event_log casio_event_log;
+EXPORT_SYMBOL(get_casio_event_log);
+struct casio_event_log * get_casio_event_log(void)
+{
+	return &casio_event_log;
+}
+void init_casio_event_log(void)
+{
+	char msg[CASIO_MSG_SIZE];
+	casio_event_log.lines=casio_event_log.cursor=0;
+	snprintf(msg,CASIO_MSG_SIZE,"init_casio_event_log:(%lu:%lu)", casio_event_log.lines, casio_event_log.cursor); 
+	register_casio_event(sched_clock(), msg, CASIO_MSG);
+
+}
+void register_casio_event(unsigned long long t, char *m, int a)
+{
+
+	if(casio_event_log.lines < CASIO_MAX_EVENT_LINES){
+		casio_event_log.casio_event[casio_event_log.lines].action=a;
+		casio_event_log.casio_event[casio_event_log.lines].timestamp=t;
+		strncpy(casio_event_log.casio_event[casio_event_log.lines].msg,m,CASIO_MSG_SIZE-1);
+		casio_event_log.lines++;
+	}
+	else{
+		printk(KERN_ALERT "register_casio_event: full\n");
+	}
+
+}
+/*
+ *casio tasks and casio rq
+ */
+//#include "sched.h"
+void init_casio_rq(struct casio_rq *casio_rq)
+{
+	casio_rq->casio_rb_root=RB_ROOT;
+	INIT_LIST_HEAD(&casio_rq->casio_list_head);
+	atomic_set(&casio_rq->nr_running,0);
+}
+void add_casio_task_2_list(struct casio_rq *rq, struct task_struct *p)
+{
+	struct list_head *ptr=NULL;
+	struct casio_task *new=NULL, *casio_task=NULL;
+	char msg[CASIO_MSG_SIZE];
+	if(rq && p){
+		new=(struct casio_task *) kzalloc(sizeof(struct casio_task),GFP_KERNEL);
+		if(new){
+			casio_task=NULL;
+			new->task=p;
+			new->absolute_deadline=0;
+			list_for_each(ptr,&rq->casio_list_head){
+				casio_task=list_entry(ptr,struct casio_task, casio_list_node);
+				if(casio_task){
+					if(new->task->casio_id < casio_task->task->casio_id){
+						list_add(&new->casio_list_node,ptr);
+					}
+				}
+			}
+			list_add(&new->casio_list_node,&rq->casio_list_head);
+			snprintf(msg,CASIO_MSG_SIZE,"add_casio_task_2_list: %d:%d:%llu",new->task->casio_id,new->task->pid,new->absolute_deadline); 
+			register_casio_event(sched_clock(), msg, CASIO_MSG);
+		}
+		else{
+			printk(KERN_ALERT "add_casio_task_2_list: kzalloc\n");
+		}
+	}
+	else{
+		printk(KERN_ALERT "add_casio_task_2_list: null pointers\n");
+	}
+}
+struct casio_task * find_casio_task_list(struct casio_rq *rq, struct task_struct *p)
+{
+	struct list_head *ptr=NULL;
+	struct casio_task *casio_task=NULL;
+	if(rq && p){
+		list_for_each(ptr,&rq->casio_list_head){
+			casio_task=list_entry(ptr,struct casio_task, casio_list_node);
+			if(casio_task){
+				if(casio_task->task->casio_id == p->casio_id){
+					return casio_task;
+				}
+			}
+		}
+	}
+	return NULL;
+}
+void rem_casio_task_list(struct casio_rq *rq, struct task_struct *p)
+{
+	struct list_head *ptr=NULL,*next=NULL;
+	struct casio_task *casio_task=NULL;
+	char msg[CASIO_MSG_SIZE];
+	if(rq && p){
+		list_for_each_safe(ptr,next,&rq->casio_list_head){
+			casio_task=list_entry(ptr,struct casio_task, casio_list_node);
+			if(casio_task){
+				if(casio_task->task->casio_id == p->casio_id){
+					list_del(ptr);
+					snprintf(msg,CASIO_MSG_SIZE,"rem_casio_task_list: %d:%d:%llu",casio_task->task->casio_id,casio_task->task->pid,casio_task->absolute_deadline); 
+					register_casio_event(sched_clock(), msg, CASIO_MSG);
+					kfree(casio_task);
+					return;
+				}
+			}
+		}
+	}
+}
+/*
+ * rb_tree functions.
+ */
+
+void remove_casio_task_rb_tree(struct casio_rq *rq, struct casio_task *p)
+{
+	rb_erase(&(p->casio_rb_node),&(rq->casio_rb_root));
+	p->casio_rb_node.rb_left=p->casio_rb_node.rb_right=NULL;
+}
+void insert_casio_task_rb_tree(struct casio_rq *rq, struct casio_task *p)
+{
+	struct rb_node **node=NULL;
+	struct rb_node *parent=NULL;
+	struct casio_task *entry=NULL;
+	node=&rq->casio_rb_root.rb_node;
+	while(*node!=NULL){
+		parent=*node;
+		entry=rb_entry(parent, struct casio_task,casio_rb_node);
+		if(entry){
+			if(p->absolute_deadline < entry->absolute_deadline){
+				node=&parent->rb_left;
+			}else{
+				node=&parent->rb_right;
+			}
+		}
+	}
+	rb_link_node(&p->casio_rb_node,parent,node);
+	rb_insert_color(&p->casio_rb_node,&rq->casio_rb_root);
+}
+struct casio_task * earliest_deadline_casio_task_rb_tree(struct casio_rq *rq)
+{
+	struct rb_node *node=NULL;
+	struct casio_task *p=NULL;
+	node=rq->casio_rb_root.rb_node;
+	if(node==NULL)
+		return NULL;
+
+	while(node->rb_left!=NULL){
+		node=node->rb_left;
+	}
+	p=rb_entry(node, struct casio_task,casio_rb_node);
+	return p;
+}
+
+static void check_preempt_curr_casio(struct rq *rq, struct task_struct *p, int flags)
+{
+	struct casio_task *t=NULL,*curr=NULL;
+	if(rq->curr->policy!=SCHED_CASIO){
+		resched_curr(rq);
+	}
+	else{
+		t=earliest_deadline_casio_task_rb_tree(&rq->casio_rq);
+		if(t){
+			curr=find_casio_task_list(&rq->casio_rq,rq->curr);
+			if(curr){
+				if(t->absolute_deadline < curr->absolute_deadline)
+					resched_curr(rq);
+			}
+			else{
+				printk(KERN_ALERT "check_preempt_curr_casio\n");
+			}
+		}
+	}
+}
+
+static struct task_struct *pick_next_task_casio(struct rq *rq, struct task_struct *prev,
+					       struct rq_flags *rf)
+{
+	struct casio_task *t=NULL;
+	t=earliest_deadline_casio_task_rb_tree(&rq->casio_rq);
+	if(t){
+		return t->task;
+	}
+	return NULL;
+}
+
+static void enqueue_task_casio(struct rq *rq, struct task_struct *p, int wakeup)
+{
+	struct casio_task *t=NULL;
+	char msg[CASIO_MSG_SIZE];
+	if(p){
+		t=find_casio_task_list(&rq->casio_rq,p);
+		if(t){
+			t->absolute_deadline=sched_clock()+p->deadline;
+			insert_casio_task_rb_tree(&rq->casio_rq, t);
+			atomic_inc(&rq->casio_rq.nr_running);
+			snprintf(msg,CASIO_MSG_SIZE,"(%d:%d:%llu)",p->casio_id,p->pid,t->absolute_deadline); 
+			register_casio_event(sched_clock(), msg, CASIO_ENQUEUE);
+		}
+		else{
+			printk(KERN_ALERT "enqueue_task_casio\n");
+		}
+	}
+}
+
+static void dequeue_task_casio(struct rq *rq, struct task_struct *p, int sleep)
+{
+	struct casio_task *t=NULL;
+	char msg[CASIO_MSG_SIZE];
+	if(p){
+		t=find_casio_task_list(&rq->casio_rq,p);
+		if(t){
+			snprintf(msg,CASIO_MSG_SIZE,"(%d:%d:%llu)",t->task->casio_id,t->task->pid,t->absolute_deadline); 
+			register_casio_event(sched_clock(), msg, CASIO_DEQUEUE);	
+			remove_casio_task_rb_tree(&rq->casio_rq, t);
+			atomic_dec(&rq->casio_rq.nr_running);
+			if(t->task->state==TASK_DEAD || t->task->state==EXIT_DEAD || t->task->state==EXIT_ZOMBIE){
+				rem_casio_task_list(&rq->casio_rq,t->task);
+			}
+		}
+		else{
+			printk(KERN_ALERT "dequeue_task_casio\n");
+		}
+	}
+
+}
+
+static void put_prev_task_casio(struct rq *rq, struct task_struct *prev)
+{
+
+}
+
+/*#ifdef CONFIG_SMP
+static unsigned long load_balance_casio(struct rq *this_rq, int this_cpu, struct rq *busiest,
+		  unsigned long max_load_move,
+		  struct sched_domain *sd, enum cpu_idle_type idle,
+	  int *all_pinned, int *this_best_prio)
+{
+	return 0;
+}*/
+
+/*static int move_one_task_casio(struct rq *this_rq, int this_cpu, struct rq *busiest,
+		   struct sched_domain *sd, enum cpu_idle_type idle)
+{
+	return 0;
+}
+#endif*/
+
+static void task_tick_casio(struct rq *rq, struct task_struct *p, int queued)
+{
+	//check_preempt_curr_casio(rq, p);
+}
+
+/*static void set_curr_task_casio(struct rq *rq)
+{
+
+}*/
+
+
+/*
+ * When switching a task to RT, we may overload the runqueue
+ * with RT tasks. In this case we try to push them off to
+ * other runqueues.
+ */
+/*static void switched_to_casio(struct rq *rq, struct task_struct *p)
+{
+        *
+         * If we are already running, then there's nothing
+         * that needs to be done. But if we are not running
+         * we may need to preempt the current running task.
+         * If that current running task is also an RT task
+         * then see if we can move to another run queue.
+         *
+}*/
+
+unsigned int get_rr_interval_casio(struct rq *rq, struct task_struct *task)
+{
+	/*
+         * Time slice is 0 for SCHED_FIFO tasks
+         */
+        if (task->policy == SCHED_RR)
+                return RR_TIMESLICE;
+        else
+                return 0;
+}
+
+static void yield_task_casio(struct rq *rq)
+{
+
+}
+
+
+/*
+ * Priority of the task has changed. This may cause
+ * us to initiate a push or pull.
+ */
+/*static void prio_changed_casio(struct rq *rq, struct task_struct *p,
+			    int oldprio)
+{
+
+}*/
+
+static int select_task_rq_casio(struct task_struct *p, int cpu, int sd_flag, int flags)
+{
+
+//	struct rq *rq = task_rq(p);
+
+	if (sd_flag != SD_BALANCE_WAKE)
+		return smp_processor_id();
+
+	return task_cpu(p);
+}
+
+
+static void set_cpus_allowed_casio(struct task_struct *p,
+				const struct cpumask *new_mask)
+{
+
+}
+
+/* Assumes rq->lock is held */
+/*static void rq_online_casio(struct rq *rq)
+{
+
+}*/
+
+/* Assumes rq->lock is held */
+/*static void rq_offline_casio(struct rq *rq)
+{
+
+}
+
+static void pre_schedule_casio(struct rq *rq, struct task_struct *prev)
+{
+
+}*/
+
+/*static void post_schedule_casio(struct rq *rq)
+{
+
+}*/
+/*
+ * If we are not running and we are not going to reschedule soon, we should
+ * try to push tasks away now
+ */
+static void task_woken_casio(struct rq *rq, struct task_struct *p)
+{
+/*        if (!task_running(rq, p) &&
+            !test_tsk_need_resched(rq->curr) &&
+            has_pushable_tasks(rq) &&
+            p->rt.nr_cpus_allowed > 1)
+                push_rt_tasks(rq);
+*/
+}
+
+/*
+ * When switch from the rt queue, we bring ourselves to a position
+ * that we might want to pull RT tasks from other runqueues.
+ */
+/*static void switched_from_casio(struct rq *rq, struct task_struct *p,
+			   int running)
+{
+
+}*/
+
+/*
+ * Simple, special scheduling class for the per-CPU casio tasks:
+ */
+ const struct sched_class casio_sched_class = {
+	.next 			= &rt_sched_class,
+	.enqueue_task		= enqueue_task_casio,
+	.dequeue_task		= dequeue_task_casio,
+	.check_preempt_curr	= check_preempt_curr_casio,
+
+	.pick_next_task		= pick_next_task_casio,
+	.put_prev_task		= put_prev_task_casio,
+
+#ifdef CONFIG_SMP
+//	.load_balance		= load_balance_casio,
+//	.move_one_task		= move_one_task_casio,
+
+	.select_task_rq		= select_task_rq_casio,
+	.set_cpus_allowed       = set_cpus_allowed_casio,
+//	.rq_online              = rq_online_casio,
+//	.rq_offline             = rq_offline_casio,
+//	.pre_schedule		= pre_schedule_casio,
+//	.post_schedule		= post_schedule_casio,
+	.task_woken		= task_woken_casio,
+//	.switched_from		= switched_from_casio,
+#endif
+
+//	.set_curr_task          = set_curr_task_casio,
+	.task_tick		= task_tick_casio,
+
+//	.switched_to		= switched_to_casio,
+
+	.yield_task		= yield_task_casio,
+	.get_rr_interval	= get_rr_interval_casio,
+
+//	.prio_changed		= prio_changed_casio,
+};
diff --git a/kernel/sched/sched_casio.h b/kernel/sched/sched_casio.h
index e69de29..28078be 100644
--- a/kernel/sched/sched_casio.h
+++ b/kernel/sched/sched_casio.h
@@ -0,0 +1,5 @@
+extern struct casio_event_log casio_event_log;
+extern const struct sched_class casio_sched_class;
+extern void init_casio_event_log(void);
+extern void add_casio_task_2_list(struct casio_rq *rq, struct task_struct *p);
+extern void init_casio_rq(struct casio_rq *casio_rq);
